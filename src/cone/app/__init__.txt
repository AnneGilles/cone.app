cone main
---------

    >>> import cone.app

Settings as from ini file::

    >>> settings = {
    ...     'cone.admin_user': 'admin',
    ...     'cone.admin_password': 'admin',
    ...     'cone.secret_password': '12345',
    ...     'cone.auth_impl': None,
    ...     'cone.plugins': '',
    ...     'cone.root.title': 'cone',
    ...     'cone.root.default_child': None,
    ...     'cone.root.mainmenu_empty_title': False,
    ... }

Test get_root::

    >>> import os
    >>> root = cone.app.get_root(os.environ)
    >>> root
    <AppRoot object 'None' at ...>

    >>> root.properties.keys()
    []
    
    >>> root.metadata.keys()
    []

AppRoot contains a settings node by default::

    >>> 'settings' in root.factories.keys()
    True

Settings contains metadata.title by default::

    >>> root['settings'].metadata.keys()
    ['title']
    
    >>> root['settings'].metadata.title
    'Settings'

Settings is displayed in navtree by default::

XXX: mainmenu and navtree same property, other name for controlling appearance?
    
    >>> root['settings'].properties.keys()
    ['in_navtree', 'icon']
    
    >>> root['settings'].properties.in_navtree
    True

Test configure_root::

    >>> cone.app.configure_root(settings)
    >>> root.properties.keys()
    ['default_child', 'mainmenu_empty_title', 'editable', 'in_navtree']

    >>> root.properties.default_child
    
    >>> root.properties.mainmenu_empty_title
    False
    
    >>> root.properties.editable
    False
    
    >>> root.properties.in_navtree
    False
    
    >>> root.metadata.keys()
    ['title']
    
    >>> root.metadata.title
    'cone'

Test register_plugin::

    >>> from cone.app.model import BaseNode
    >>> cone.app.register_plugin('dummy', BaseNode)
    >>> 'dummy' in root.factories.keys()
    True
    
    >>> cone.app.register_plugin('dummy', BaseNode)
    Traceback (most recent call last):
      ...
    ValueError: Plugin with name 'dummy' already registered.

Test register_plugin_config::

    >>> cone.app.register_plugin_config('dummy', BaseNode)
    >>> 'dummy' in root['settings'].factories.keys()
    True
    
    >>> cone.app.register_plugin_config('dummy', BaseNode)
    Traceback (most recent call last):
      ...
    ValueError: Config with name 'dummy' already registered.

Test auth_tkt_factory::

    >>> cone.app.auth_tkt_factory(secret='12345')
    <pyramid.authentication.AuthTktAuthenticationPolicy object at ...>

Test acl_factory::

    >>> cone.app.acl_factory()
    <pyramid.authorization.ACLAuthorizationPolicy object at ...>
    
    >>> del root._v_metadata
    >>> del root._v_properties
    >>> del root.factories['settings']

Test main::

    >>> app = cone.app.main({}, **settings)
    >>> app
    <pyramid.router.Router object at ...>

Cleanup::

    >>> from pyramid.interfaces import IAuthenticationPolicy
    >>> authn = app.registry.getUtility(IAuthenticationPolicy)
    >>> app.registry.unregisterUtility(authn, IAuthenticationPolicy)
    True
    
    >>> from pyramid.interfaces import IAuthorizationPolicy
    >>> authz = app.registry.getUtility(IAuthorizationPolicy)
    >>> app.registry.unregisterUtility(authz, IAuthorizationPolicy)
    True
    